datasource db {
  provider = "mysql"
  url      = env("DATABASE_URI")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int       @id @default(autoincrement())
  name              String?
  email             String    @unique
  icon              String?
  header            String?
  isAdmin           Boolean   @default(false)
  bio               String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // 関連フィールド
  sentMessages      Message[]
  purchaseMessages   PurchaseMessage[]
  messageRooms      MessageRoom[] 
  courses           Course[] 
  reservations      Reservation[]
  payments          Payment[]
  reviews           Review[]
  searchHistories   SearchHistory[]
  userGames         UserGame[]
  accesses    CourseAccess[]
  notification    Notification[] @relation("receicvedNotification")
  sentNotification    Notification[] @relation("sentNotification")
  paymentAccount    PaymentAccount[]
  userPayment    UserPayment[]
  refunds    Refund[]
}

model PaymentAccount {
  id            Int       @id @default(autoincrement())
  userId        Int      @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bankName      String
  branchName    String
  accountType   Int
  accountNumber String    
  accountHolder String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model UserPayment{
  id            Int       @id @default(autoincrement())
  userId        Int      
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount        Int
  createdAt     DateTime  @default(now())
}


model Course {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  price       Int
  duration    Int        @default(30)
  image       String?
  coachId     Int
  coach       User         @relation(fields: [coachId], references: [id],onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  gameId       Int?
  game         Game?          @relation(fields: [gameId], references: [id],onDelete: SetNull)

  schedules   Schedule[]
  reservations Reservation[] @relation("CourseReservations") 
  reviews     Review[]
  messageRooms    MessageRoom[]
  accesses    CourseAccess[]
}

model Schedule {
  id          Int          @id @default(autoincrement())
  courseId    Int
  course      Course       @relation(fields: [courseId], references: [id] ,onDelete: Cascade)
  startTime   DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  reservations Reservation[]
  payments    Payment[]
  purchaseMessages   PurchaseMessage[]
  
}

model Refund{
  id          Int          @id @default(autoincrement())
  customerId  Int?
  customer    User?         @relation(fields: [customerId], references: [id],onDelete: SetNull)
  reservationId  Int?
  reservation    Reservation?     @relation(fields: [reservationId], references: [id],onDelete: SetNull)
  status      Int
  text        String
}

model Reservation {
  id          Int          @id @default(autoincrement())
  customerId  Int
  customer    User         @relation(fields: [customerId], references: [id],onDelete: Cascade)
  scheduleId  Int          @unique
  schedule    Schedule     @relation(fields: [scheduleId], references: [id],onDelete: Cascade)
  courseId    Int
  course      Course       @relation("CourseReservations", fields: [courseId], references: [id] ,onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  roomId    Int?    @unique 
  room      MessageRoom? @relation(fields: [roomId], references: [id] ,onDelete: Cascade)
  refunds    Refund[]
}

model MessageRoom {
  id         Int     @id @default(autoincrement())
  roomKey    String    @unique
  courseId   Int?
  course     Course?  @relation(fields: [courseId], references: [id],onDelete: SetNull)
  customerId Int
  customer   User    @relation(fields: [customerId], references: [id],onDelete: Cascade)
  messages   Message[]
  notifications Notification[]
  purchaseMessages  PurchaseMessage[]
  reservation  Reservation[]
}

model Message {
  id        Int         @id @default(autoincrement())
  roomId    Int
  room      MessageRoom @relation(fields: [roomId], references: [id] ,onDelete: Cascade)
  senderId  Int?
  sender    User?        @relation(fields: [senderId], references: [id],onDelete: SetNull)
  content   String
  isRead    Boolean     @default(false)
  sentAt    DateTime    @default(now())
}

model PurchaseMessage {
  id        Int         @id @default(autoincrement())
  roomId    Int
  room      MessageRoom @relation(fields: [roomId], references: [id] ,onDelete: Cascade)
  senderId  Int?
  sender    User?        @relation(fields: [senderId], references: [id],onDelete: SetNull)
  scheduleId Int?
  schedule    Schedule?     @relation(fields: [scheduleId], references: [id],onDelete: SetNull)
  isRead    Boolean     @default(false)
  sentAt    DateTime    @default(now())
}


model Payment {
  id          Int          @id @default(autoincrement())
  customerId  Int
  customer    User         @relation(fields: [customerId], references: [id] ,onDelete: Cascade)
  scheduleId    Int       @unique
  schedule      Schedule       @relation(fields: [scheduleId], references: [id] ,onDelete: Cascade)
  amount      Int
  method      String
  status      Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Review {
  id          Int          @id @default(autoincrement())
  customerId  Int
  customer    User         @relation(fields: [customerId], references: [id],onDelete: Cascade)
  courseId    Int
  course      Course       @relation(fields: [courseId], references: [id] ,onDelete: Cascade)
  rating      Int
  comment     String?
  createdAt   DateTime     @default(now())
}

model SearchHistory {
  id          Int          @id @default(autoincrement())
  userId      Int
  user        User         @relation(fields: [userId], references: [id] ,onDelete: Cascade)
  query       String
  show        Boolean      @default(true)
  searchedAt  DateTime     @default(now())
}

model Game {
  id          Int          @id @default(autoincrement())
  name        String      
  image       String?
  createdAt   DateTime     @default(now())

  courses      Course[]
  userGames    UserGame[]
}

model UserGame {
  id          Int          @id @default(autoincrement())
  userId      Int
  user        User         @relation(fields: [userId], references: [id] ,onDelete: Cascade)
  gameId       Int
  game         Game          @relation(fields: [gameId], references: [id],onDelete: Cascade)
}

model CourseAccess {
  id          Int          @id @default(autoincrement())
  courseId      Int
  course        Course        @relation(fields: [courseId], references: [id] ,onDelete: Cascade)
  userId       Int?
  user         User?          @relation(fields: [userId], references: [id] ,onDelete: SetNull)
  createdAt   DateTime     @default(now())
}


model Notification {
  id          Int          @id @default(autoincrement())
  userId       Int
  user         User          @relation(fields: [userId], references: [id] ,onDelete: Cascade,name:"receicvedNotification")
  senderId       Int?
  sender         User?          @relation(fields: [senderId], references: [id] ,onDelete: Cascade,name:"sentNotification")
  content     String
  createdAt   DateTime     @default(now())
  isRead      Boolean  @default(false)
  roomId    Int?
  room      MessageRoom? @relation(fields: [roomId], references: [id] ,onDelete: Cascade)
}