generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URI")
}

model User {
  id               Int               @id @default(autoincrement())
  name             String?
  email            String            @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  bio              String?
  icon             String?
  gameId           Int?
  game             Game?     @relation(fields: [gameId], references: [id])
  isAdmin          Boolean           @default(false)
  isInitialized          Boolean           @default(false)
  courses          Course[]
  accesses         CourseAccess[]
  sentMessages     Message[]
  customerMessageRooms MessageRoom[] @relation("CustomerMessageRooms")
  coachMessageRooms    MessageRoom[] @relation("CoachMessageRooms")
  payments         Payment[]
  paymentAccount   PaymentAccount?
  refunds          Refund[]
  reservations     Reservation[]
  searchHistories  SearchHistory[]
  userPayment      UserPayment[]
  reviews          Review[]
  timeSlots        TimeSlot[]
}

model PaymentAccount {
  id            Int      @id @default(autoincrement())
  userId        Int      @unique
  bankName      String
  branchName    String
  accountType   Int
  accountNumber String
  accountHolder String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPayment {
  id        Int      @id @default(autoincrement())
  userId    Int
  amount    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "UserPayment_userId_fkey")
}

model Course {
  id           Int            @id @default(autoincrement())
  title        String
  description  String
  price        Int
  image        String?
  coachId      Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  gameId       Int?
  duration     Int            @default(30)
  coach        User           @relation(fields: [coachId], references: [id], onDelete: Cascade)
  game         Game?          @relation(fields: [gameId], references: [id])
  accesses     CourseAccess[]
  reservations Reservation[]  @relation("CourseReservations")
  reviews      Review[]
  isPublic     Boolean        @default(true)
  tagCourses   TagCourse[]

  @@index([coachId], map: "Course_coachId_fkey")
  @@index([gameId], map: "Course_gameId_fkey")
}

model TimeSlot {
  id               Int               @id @default(autoincrement())
  coachId         Int
  dateTime        String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  reservationId     Int?
  reservation     Reservation?    @relation(fields: [reservationId], references: [id])
  coach            User            @relation(fields: [coachId], references: [id], onDelete: Cascade)

  @@index([coachId], map: "Schedule_coachId_fkey")
}

model Refund {
  id            Int          @id @default(autoincrement())
  customerId    Int?
  reservationId Int?
  status        Int
  text          String
  customer      User?        @relation(fields: [customerId], references: [id])
  reservation   Reservation? @relation(fields: [reservationId], references: [id])

  @@index([customerId], map: "Refund_customerId_fkey")
  @@index([reservationId], map: "Refund_reservationId_fkey")
}

model Reservation {
  id         Int      @id @default(autoincrement())
  customerId Int
  courseId   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  refunds    Refund[]
  status     Int
  course     Course   @relation("CourseReservations", fields: [courseId], references: [id], onDelete: Cascade)
  customer   User     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  timeSlots   TimeSlot[]
  payment         Payment?
  roomId   Int?
  room     MessageRoom? @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([courseId], map: "Reservation_courseId_fkey")
  @@index([customerId], map: "Reservation_customerId_fkey")
  @@index([roomId], map: "Reservation_roomId_fkey")
}

model MessageRoom {
  id               Int               @id @default(autoincrement())
  coachId          Int?
  customerId       Int
  roomKey          String            @unique
  messages         Message[]
  coach            User?             @relation("CoachMessageRooms", fields: [coachId], references: [id])
  customer         User              @relation("CustomerMessageRooms", fields: [customerId], references: [id], onDelete: Cascade)
  reservations     Reservation[]

  @@index([coachId], map: "MessageRoom_coachId_fkey")
  @@index([customerId], map: "MessageRoom_customerId_fkey")
}

model Message {
  id       Int         @id @default(autoincrement())
  senderId Int?
  content  String
  sentAt   DateTime    @default(now())
  isRead   Boolean     @default(false)
  roomId   Int
  room     MessageRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender   User?       @relation(fields: [senderId], references: [id])

  @@index([roomId], map: "Message_roomId_fkey")
  @@index([senderId], map: "Message_senderId_fkey")
}

model Payment {
  id         Int      @id @default(autoincrement())
  customerId Int
  amount     Int
  method     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  reservationId Int      @unique
  customer   User     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  reservation Reservation @relation(fields: [reservationId], references: [id])

  @@index([customerId], map: "Payment_customerId_fkey")
}

model Review {
  id         Int      @id @default(autoincrement())
  customerId Int
  courseId   Int
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  customer   User   @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([courseId], map: "Review_courseId_fkey")
  @@index([customerId], map: "Review_customerId_fkey")
}

model SearchHistory {
  id         Int      @id @default(autoincrement())
  userId     Int
  query      String
  searchedAt DateTime @default(now())
  show       Boolean  @default(true)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "SearchHistory_userId_fkey")
}

model Game {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  image     String?
  courses   Course[]
  users     User[]
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  tagCourses   TagCourse[]
}

model TagCourse {
  id        Int        @id @default(autoincrement())
  tagId     Int
  tag       Tag       @relation(fields: [tagId], references: [id])
  courseId  Int
  course    Course    @relation(fields: [courseId], references: [id])
}

model CourseAccess {
  id        Int      @id @default(autoincrement())
  courseId  Int
  userId    Int?
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])

  @@index([courseId], map: "CourseAccess_courseId_fkey")
  @@index([userId], map: "CourseAccess_userId_fkey")
}

